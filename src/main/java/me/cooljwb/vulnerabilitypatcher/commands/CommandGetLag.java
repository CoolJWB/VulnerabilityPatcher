package me.cooljwb.vulnerabilitypatcher.commands;

import me.cooljwb.vulnerabilitypatcher.patches.Patches;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class CommandGetLag extends Patches implements CommandExecutor {

    // In-dev command.

    public static String getlag = "getlag";

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        if(cmd.getName().equalsIgnoreCase("getlag")) {
            HashMap<Chunk, Integer> chunks = getChunkEntities();
            for(Map.Entry entry : chunks.entrySet()) {
                if((Integer)entry.getValue() > 10)
                    System.out.println(((Chunk)entry.getKey()).getWorld() + " " + ((Chunk)entry.getKey()).getX() + " " + ((Chunk)entry.getKey()).getZ());
            }
        }
        return false;
    }

    public HashMap<Chunk, Integer> getChunkEntities() {
        HashMap<Chunk, Integer> chunks = new HashMap<>();
        for(Chunk chunk : getLoadedChunks()) {
            chunks.put(chunk, (chunk.getEntities().length + chunk.getTileEntities().length));
        }
        return chunks;
    }
    private ArrayList<Chunk> getLoadedChunks() {
        ArrayList<Chunk> chunks = new ArrayList<>();
        for(World world : Bukkit.getWorlds()) {
            chunks.addAll(Arrays.asList(world.getLoadedChunks()));
        }
        return chunks;
    }

}
