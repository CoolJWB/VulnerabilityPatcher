package me.cooljwb.vulnerabilitypatcher.commands;

import me.cooljwb.vulnerabilitypatcher.SMG;
import me.cooljwb.vulnerabilitypatcher.VulnerabilityPatcher;
import me.cooljwb.vulnerabilitypatcher.patches.Patches;

import java.io.File;
import java.util.List;
import java.util.logging.Logger;

import net.minecraft.server.v1_13_R2.EntityPlayer;
import net.minecraft.server.v1_13_R2.NBTTagCompound;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.craftbukkit.v1_13_R2.entity.CraftEntity;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class CommandVulnerabilityPatcher extends Patches implements CommandExecutor {

    public static String vulnerabilitypatcher = "vulnerabilitypatcher";
    private VulnerabilityPatcher main;
    private Logger log = Logger.getLogger("Minecraft");

    public CommandVulnerabilityPatcher(VulnerabilityPatcher main) {
        this.main = main;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        if(cmd.getName().equalsIgnoreCase(vulnerabilitypatcher)) {
            if(args.length <= 0 || args[0].equalsIgnoreCase("help")) {
                if(sender.hasPermission(main.getConfig().getString("Commands.Help.Permission")))
                    msg(sender, SMG.VULNERABILITYPATCHER_HELP.msg);
                else
                    msg(sender, SMG.NO_PERMISSION.msg);
            }

            else if(args[0].equalsIgnoreCase("version")) {
                if(sender.hasPermission(main.getConfig().getString("Commands.Version.Permission")))
                    msg(sender, SMG.VULNERABILITYPATCHER.msg + ChatColor.GRAY + String.format("Server is running " + ChatColor.GREEN + main.getName() + "-" + main.getDescription().getVersion()));
                else
                    msg(sender, SMG.NO_PERMISSION.msg);
            }

            else if(args[0].equalsIgnoreCase("reload") || args[0].equalsIgnoreCase("rl")) {
                if(sender.hasPermission(main.getConfig().getString("Commands.Reload.Permission"))) {
                    main.reloadPlugin();
                    msg(sender, SMG.VULNERABILITYPATCHER.msg + ChatColor.GREEN + "Reloaded the config.");
                }

                else
                    msg(sender, SMG.NO_PERMISSION.msg);
            }

            else if(args[0].equalsIgnoreCase("delete") && args.length == 2) {
                if(sender.hasPermission(main.getConfig().getString("Commands.Delete.Permission"))) {
                    if(Bukkit.getPlayer(args[1]) != null)
                        ((CraftEntity)Bukkit.getPlayer(args[1])).getHandle().f(new NBTTagCompound());
                    else if(Bukkit.getOfflinePlayer(args[1]) != null) {
                        File file = new File(Bukkit.getServer().getWorldContainer() + "/world/playerdata/" + Bukkit.getOfflinePlayer(args[1]).getUniqueId().toString() + ".dat");
                        file.delete();
                    }
                    else
                        msg(sender, String.format(SMG.PLAYER_NOT_FOUND.msg, args[1]));
                }
            }

            else if(args[0].equalsIgnoreCase("blocktag") && args.length == 2) {
                if(sender.hasPermission(main.getConfig().getString("Commands.BlockTags.Permission"))) {
                    List<String> stringList = main.getConfig().getStringList("BlockedEntityTags");
                    stringList.add(args[1]);

                    main.getConfig().set("BlockedEntityTags", stringList);
                    main.saveConfig();
                    msg(sender, SMG.BLOCKED_TAGS.msg);
                }

                else
                    msg(sender, SMG.NO_PERMISSION.msg);
            }

            else if(args[0].equalsIgnoreCase("unblocktag") && args.length == 2) {
                if(sender.hasPermission(main.getConfig().getString("Commands.UnblockTags.Permission"))) {
                    List<String> stringList = main.getConfig().getStringList("BlockedEntityTags");
                    stringList.remove(args[1]);

                    main.getConfig().set("BlockedEntityTags", stringList);
                    main.saveConfig();
                    msg(sender, String.format(SMG.UNBLOCKED_TAGS.msg, args[1]));
                }

                else
                    msg(sender, SMG.NO_PERMISSION.msg);
            }

            else if(args[0].equalsIgnoreCase("enablepatch") && args.length == 2) {
                if(sender.hasPermission(main.getConfig().getString("Commands.EnablePatch.Permission"))) {
                    List<String> stringList = main.getConfig().getStringList("Patches");
                    stringList.add(args[1]);

                    main.getConfig().set("Patches", stringList);
                    main.saveConfig();
                    msg(sender, String.format(SMG.ENABLED_PATCH.msg, args[1]));
                }

                else
                    msg(sender, SMG.NO_PERMISSION.msg);
            }

            else if(args[0].equalsIgnoreCase("disablepatch") && args.length == 2) {
                if(sender.hasPermission(main.getConfig().getString("Commands.DisablePatch.Permission"))) {
                    List<String> stringList = main.getConfig().getStringList("Patches");
                    stringList.remove(args[1]);

                    main.getConfig().set("Patches", stringList);
                    main.saveConfig();
                    msg(sender, String.format(SMG.DISABLED_PATCH.msg, args[1]));
                }

                else
                    msg(sender, SMG.NO_PERMISSION.msg);
            }

            else
                msg(sender, SMG.UNKNOWN_ARGUMENT.msg);
        }
        return true;
    }
}
