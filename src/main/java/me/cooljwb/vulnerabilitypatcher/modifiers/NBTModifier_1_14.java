package me.cooljwb.vulnerabilitypatcher.modifiers;

import me.cooljwb.vulnerabilitypatcher.Variables;
import me.cooljwb.vulnerabilitypatcher.VulnerabilityPatcher;
import me.cooljwb.vulnerabilitypatcher.patches.Patches;
import net.minecraft.server.v1_14_R1.NBTBase;
import net.minecraft.server.v1_14_R1.NBTTagCompound;
import net.minecraft.server.v1_14_R1.NBTTagList;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.craftbukkit.v1_14_R1.entity.CraftEntity;
import org.bukkit.craftbukkit.v1_14_R1.entity.CraftPlayer;
import org.bukkit.craftbukkit.v1_14_R1.inventory.CraftItemStack;
import org.bukkit.entity.Arrow;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.projectiles.ProjectileSource;

import java.io.File;
import java.util.HashMap;
import java.util.logging.*;

public class NBTModifier_1_14 {

    private Logger log = Logger.getLogger("Minecraft");

    /* Misc */
    public void log(Level level, String message) {
        log.log(level, String.format("[%s] %s", VulnerabilityPatcher.pluginName, message));
    }
    private void fired_countermeasure(String reason) {
        if (Patches.devmode)
            log(Level.INFO, String.format("Fired countermeasure in %s reason: %s", getClass().getName(), reason));
    }

    private NBTTagCompound getItemNBT(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);
            if(nmsItemStack != null)
                return nmsItemStack.getTag();
        }
        return null;
    }
    private NBTTagCompound getEntityNBT(Entity entity) {
        net.minecraft.server.v1_14_R1.Entity nmsEntity = ((CraftEntity)entity).getHandle();
        NBTTagCompound tag = new NBTTagCompound();
        nmsEntity.save(tag);
        return tag;
    }
    private void setEntityNBT(Entity entity, NBTTagCompound nbtTagCompound) {
        net.minecraft.server.v1_14_R1.Entity nmsEntity = ((CraftEntity)entity).getHandle();
        nmsEntity.f(nbtTagCompound);
    }
    public NBTTagList getAttributeList(ItemStack item) {
        NBTTagCompound itemtag = getItemNBT(item);

        if(item != null && itemtag != null && itemtag.hasKey("AttributeModifiers"))
            return getItemNBT(item).getList("AttributeModifiers", 10);
        return null;
    }
    String itemToString(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if(nmsItemStack.hasTag())
                return nmsItemStack.getTag().toString();
        }
        return "";
    }

    boolean removePlayerdata(String player) {
        if(Bukkit.getPlayer(player) != null) {
            ((CraftEntity) Bukkit.getPlayer(player)).getHandle().f(new net.minecraft.server.v1_14_R1.NBTTagCompound());
            return true;
        }
        else if(Bukkit.getOfflinePlayer(player) != null) {
            File file = new File(Bukkit.getServer().getWorldContainer() + "/world/playerdata/" + Bukkit.getOfflinePlayer(player).getUniqueId().toString() + ".dat");
            return file.delete();
        }
        return false;
    }
    void resetMeta(Player player, ItemStack item, boolean mainhand) {
        net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if(nmsItemStack.hasTag() && nmsItemStack.getTag().hasKey("pages")) {
            if (nmsItemStack.getTag().getList("pages", 8).toString().contains("run_command")) {
                BookMeta meta = (BookMeta) item.getItemMeta();
                ItemStack book = new ItemStack(Material.WRITTEN_BOOK);

                meta.setPages(meta.getPages());
                book.setItemMeta(meta);

                if (mainhand)
                    player.getInventory().setItemInMainHand(book);
                else
                    player.getInventory().setItemInOffHand(book);
            }
        }
    }
    boolean isPlayer(ProjectileSource source) {
        return source instanceof CraftPlayer;
    }
    double getArrowDamage(Arrow arrow) {
        return getEntityNBT(arrow).hasKey("damage") ? getEntityNBT(arrow).getDouble("damage") : 0;
    }
    void setArrowDamage(Arrow arrow, double amount) {
        NBTTagCompound tag = getEntityNBT(arrow);
        if(tag.hasKey("damage")) {
            tag.setDouble("damage", amount);
            setEntityNBT(arrow, tag);
        }
    }

    boolean isCrashItem(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if(nmsItemStack.getTag() != null) {
                NBTTagCompound itemtag = nmsItemStack.getTag();

                if(itemtag.toString().contains("translation.test.invalid")) {
                    fired_countermeasure("isCrashItem");
                    return true;
                }
            }
        }
        return false;
    }
    boolean containsCrashItem(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if(nmsItemStack.getTag() != null) {
                NBTTagCompound blockentitytag = nmsItemStack.getTag().getCompound("BlockEntityTag");
                NBTTagList itemlist = blockentitytag.getList("Items", 10);

                for(int a = 0; a <= itemlist.size(); a++) {
                    NBTTagCompound itemtag = itemlist.getCompound(a).getCompound("tag");

                    if(itemtag.toString().contains("translation.test.invalid")) {
                        fired_countermeasure("containsCrashItem");
                        return true;
                    }
                }
            }
        }
        return false;
    }

    boolean isDeathItem(ItemStack item) {
        net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if(nmsItemStack != null && nmsItemStack.hasTag())
            return isDeathItem(nmsItemStack.getTag());
        return false;
    }
    private boolean isDeathItem(NBTTagCompound item) {
        if(item != null) {
            NBTTagList attrlist = item.getList("AttributeModifiers", 10);

            if(attrlist != null) {
                for(int i = 0; i < attrlist.size(); i++) {
                    NBTTagCompound compound = (NBTTagCompound)attrlist.get(i);
                    if((compound.getString("Name").equalsIgnoreCase("MAX_HEALTH") || compound.getString("AttributeName").equalsIgnoreCase("generic.maxHealth")) && compound.getDouble("Amount") <= 0) {
                        fired_countermeasure("isDeathItem");
                        return true;
                    }
                }
            }
        }
        return false;
    }
    boolean containsDeathItem(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if(nmsItemStack.getTag() != null) {
                NBTTagCompound blockentitytag = nmsItemStack.getTag().getCompound("BlockEntityTag");
                NBTTagList itemlist = blockentitytag.getList("Items", 10);

                for(int a = 0; a <= itemlist.size(); a++) {
                    NBTTagList attrlist = itemlist.getCompound(a).getCompound("tag").getList("AttributeModifiers", 10);

                    for(int b = 0; b <= attrlist.size(); b++) {
                        String attribute_name = attrlist.getCompound(b).getString("AttributeName");
                        String name = attrlist.getCompound(b).getString("Name");
                        Double amount = attrlist.getCompound(b).getDouble("Amount");

                        if((name.equalsIgnoreCase("MAX_HEALTH") || attribute_name.equalsIgnoreCase("generic.maxHealth")) && amount <= 0) {
                            fired_countermeasure("containsDeathItem");
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    boolean isDisconnectItem(ItemStack item) {
        net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if(nmsItemStack != null && nmsItemStack.hasTag())
            return isDisconnectItem(nmsItemStack.getTag());
        return false;
    }
    private boolean isDisconnectItem(NBTTagCompound item) {
        if(item != null) {
            if(item.hasKey("CustomPotionColor") && item.getInt("CustomPotionColor") < 0) {
                fired_countermeasure("isCustomPotionColorDisconnectItem");
                return true;
            }


            else if((item.getCompound("display").hasKey("color") && item.getCompound("display").getInt("color") < 0)) {
                fired_countermeasure("isDisplayColorDisconnectItem");
                return true;
            }

            else if(item.getCompound("BlockEntityTag").hasKey("Patterns")) {
                NBTTagList list = item.getCompound("BlockEntityTag").getList("Patterns", 10);
                for(int x = 0; x <= list.size(); x++) {
                    if(list.get(x).getTypeId() == 10) {
                        if(list.getCompound(x).hasKey("Color") && list.getCompound(x).getInt("Color") < 0)
                            return true;
                    }
                }

                for(NBTBase base : item.getCompound("BlockEntityTag").getList("Patterns", 10)) {
                    if(base.asString().contains("Color:-1")) {
                        fired_countermeasure("isDisplayBannedColorDisconnectItem");
                        return true;
                    }
                }
            }

            else if(item.toString().length() > 60000 || isMovementDisconnectItem(item) || isInvalidAttributeName(item)) {
                fired_countermeasure("isLargeNBTDisconnectItem");
                return true;
            }
        }
        return false;
    }
    boolean containsDisconnectItem(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if(nmsItemStack != null && nmsItemStack.getTag() != null) {
                NBTTagList items = nmsItemStack.getTag().getCompound("BlockEntityTag").getList("Items", 10);

                if(items != null) {
                    for (int a = 0; a <= items.size(); a++) {
                        NBTTagCompound nmsitem = items.getCompound(a);
                        return isDisconnectItem(nmsitem.getCompound("tag"));
                    }
                }
            }
        }
        return false;
    }
    private boolean isMovementDisconnectItem(NBTTagCompound tag) {
        if(tag != null) {
            NBTTagList attrlist = tag.getList("AttributeModifiers", 10);
            if(attrlist != null) {
                HashMap<String, Float> attributes = new HashMap<>();

                for(int a = 0; a <= attrlist.size(); a++) {
                    NBTTagCompound attribute = attrlist.getCompound(a);

                    if(attribute.getString("AttributeName").equalsIgnoreCase("generic.movementspeed") && attributes.containsKey(attribute.getString("AttributeName").toLowerCase()) && !Float.isFinite(attribute.getFloat("Amount"))) {
                        fired_countermeasure("isMovementDisconnectItem");
                        return true;
                    }

                    attributes.put(attribute.getString("AttributeName").toLowerCase(), attribute.getFloat("Amount"));
                }
            }
        }
        return false;
    }
    private boolean isInvalidAttributeName(NBTTagCompound tag) {
        if(tag != null) {
            NBTTagList attrlist = tag.getList("AttributeModifiers", 10);

            if(attrlist != null) {
                for(int a = 0; a <= attrlist.size(); a++) {
                    NBTTagCompound attribute = attrlist.getCompound(a);

                    if(attribute != null && attribute.getString("AttributeName").toLowerCase() != "") {
                        if(!Variables.Attributes.liststr.contains(attribute.getString("AttributeName").toLowerCase())) {
                            fired_countermeasure("isInvalidAttributeNameDisconnectItem");
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    boolean isDangerousEgg(ItemStack item) {
        if (item != null && item.getType().name().equalsIgnoreCase("spawn_egg")) {
            net.minecraft.server.v1_14_R1.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if (nmsItemStack.hasTag() && VulnerabilityPatcher.main.getConfig().getStringList("BlockedEntityTags").contains(nmsItemStack.getTag().getCompound("EntityTag").getString("id").replaceAll("minecraft:", "")))
                return true;
        }
        return false;
    }
}
