package me.cooljwb.vulnerabilitypatcher;

import me.cooljwb.vulnerabilitypatcher.commands.CommandGetNBT;
import me.cooljwb.vulnerabilitypatcher.commands.CommandVulnerabilityPatcher;
import me.cooljwb.vulnerabilitypatcher.patches.*;
import org.apache.commons.io.FileUtils;
import org.bukkit.Bukkit;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public final class VulnerabilityPatcher extends JavaPlugin {

    /*
     * Patches: Books with commands, Invalid translations (crashes both client and server), Death Items, Death Potions, Rouge Entities, Arrow knockback, Trident speed,
     * Large follow range, Disconnect Items, Crash Eggs, Knowledge Books, Negative Damage Arrows, much more.
     */

    public static VulnerabilityPatcher main;
    private Logger log = Logger.getLogger("Minecraft");

    public static String pluginName, pluginVersion;
    private List<String> pluginAuthors;

    private ArrayList<Listener> listeners = new ArrayList<>();

    private Patches patches;
    private CommandVulnerabilityPatcher commandvulnerabilitypatcher = new CommandVulnerabilityPatcher(this);
    private CommandGetNBT commandgetnbt = new CommandGetNBT(this);

    public static Death_Items death_items = new Death_Items();
    public static Disconnect_Items disconnect_items = new Disconnect_Items();
    public static Crash_Items crash_items = new Crash_Items();

    @Override
    public void onEnable() {
        try {
            updateConfig();
        } catch(IOException e) {
            log.log(Level.WARNING, String.format("[%s] Could not update the config: " + e.getLocalizedMessage(), pluginName));
        }
    	
        initialize();
        patches.initialize();

        registerConfig();
        registerEvents();

        Bukkit.getServer().getPluginCommand(commandvulnerabilitypatcher.vulnerabilitypatcher).setExecutor(commandvulnerabilitypatcher);
        Bukkit.getServer().getPluginCommand(commandgetnbt.getnbt).setExecutor(commandgetnbt);

        log.log(Level.INFO, String.format("[%s] %s v%s was enabled.", pluginName, pluginName, pluginVersion));
        log.log(Level.INFO, String.format("[%s] %s patches were loaded.", pluginName, listeners.size()));
    }

    public void initialize() {
        this.pluginName = this.getName();
        this.pluginVersion = this.getDescription().getVersion();
        this.pluginAuthors = this.getDescription().getAuthors();
        this.patches = new Patches(this);
        this.main = this;
    }

    public void registerConfig() {
        getConfig().options().copyDefaults(true);
        saveDefaultConfig();
    }

    public void reloadPlugin() {
        reloadConfig();
        initialize();
        patches.initialize();
    }

    public void registerEvents() {
        for(String patch : getConfig().getStringList("Patches")) {
            switch(patch) {
                case "DeathPotions": listeners.add(new Death_Potions()); break;
                case "DeathItems": listeners.add(new Death_Items()); break;
                case "CrashItems": listeners.add(new Crash_Items()); break;
                case "Books": listeners.add(new Books()); break;
                case "RougeEntity": listeners.add(new Rouge_Entity()); break;
                case "Arrows": listeners.add(new Arrows()); break;
                case "Riptide": listeners.add(new Trident_Riptide()); break;
                case "FollowRange": listeners.add(new Follow_Range()); break;
                case "DisconnectItems": listeners.add(new Disconnect_Items()); break;
                case "EntityTag": listeners.add(new Entity_Tag()); break;
            }
        }
        listeners.forEach(listener -> Bukkit.getPluginManager().registerEvents(listener, this));
    }
    
    public void updateConfig() throws IOException {
        File conf = new File("plugins/VulnerabilityPatcher/config.yml");
        String confstr = FileUtils.readFileToString(conf);
        
        if(confstr.contains("ConfVersion")) {
            // Foundation of automatic update system.
        }

        else {
            log.log(Level.WARNING, String.format("[%s] Did not find the ConfVersion in config.yml, reverting to ConfVersion 0 (if you have recently updated from version 0.1.1 then this is normal).", pluginName));

            File confbackup = new File("plugins/VulnerabilityPatcher/config-backup.yml");
            FileUtils.copyFile(conf, confbackup);

            log.log(Level.INFO, String.format("[%s] Made backup of config.yml at plugins/VulnerabilityPatcher/config-backup.yml", pluginName));
            
            FileUtils.forceDelete(conf);
        }
    }
}
