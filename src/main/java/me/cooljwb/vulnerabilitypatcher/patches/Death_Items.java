package me.cooljwb.vulnerabilitypatcher.patches;

import me.cooljwb.vulnerabilitypatcher.SMG;
import net.minecraft.server.v1_13_R2.NBTTagCompound;
import net.minecraft.server.v1_13_R2.NBTTagList;
import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.bukkit.Bukkit;
import org.bukkit.block.Container;
import org.bukkit.craftbukkit.v1_13_R2.inventory.CraftItemStack;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Death_Items extends Patches implements Listener {

    private Logger log = Logger.getLogger("Minecraft");

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockDispenseEvent(BlockDispenseEvent event) {
        if(containsDeathItem(event.getItem())) {
            event.setCancelled(true);
            Container container = (Container) event.getBlock().getState();

            for(int c = 0; c < container.getInventory().getSize(); c++) {
                if(container.getInventory().getItem(c) != null) {
                    if (container.getInventory().getItem(c).isSimilar(event.getItem()))
                        container.getInventory().getItem(c).setItemMeta(null);
                }
            }

            notifyViolation("Dispenser", "place", event.getItem().getType() + " with death item in it", event.getBlock().getLocation());
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockPlaceEvent(BlockPlaceEvent event) {
        if(event.getBlockPlaced().getState() instanceof Container) {
            Container container = (Container) event.getBlockPlaced().getState();

            for(ItemStack item : container.getInventory()) {
                if(isDeathItem(item) || containsDeathItem(item)) {
                    container.getInventory().remove(item);
                    event.setCancelled(true);

                    Player player = event.getPlayer();
                    msg(player, SMG.ITEM_IN_CONTAINER.msg);
                    notifyViolation(player, "place", event.getBlock().getType() + " with death item in it", event.getPlayer().getLocation());
                }
            }
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onInventoryClickEvent(InventoryClickEvent event) {
        if(isDeathItem(event.getCursor()) || containsDeathItem(event.getCursor())) {
            Player player = null;
            if(event.getWhoClicked() instanceof Player) {
                player = Bukkit.getPlayer(event.getWhoClicked().getUniqueId());
                if(!event.getEventName().equals("InventoryCreativeEvent"))
                    msg(player, SMG.ITEM.msg);
            }

            if(!event.getEventName().equals("InventoryCreativeEvent"))
                notifyViolation(player, "acquire", "death item", player.getLocation());

            BukkitScheduler scheduler = Bukkit.getServer().getScheduler();
            scheduler.scheduleSyncDelayedTask(main, new Runnable() {
                @Override
                public void run() {
                    if(!event.getSlotType().equals(InventoryType.SlotType.OUTSIDE))
                        event.getWhoClicked().getInventory().getItem(event.getSlot()).setItemMeta(null);
                }
            }, 0L);
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerDropEvent(PlayerDropItemEvent event) {
        ItemStack item = event.getItemDrop().getItemStack();

        if(isDeathItem(item) || containsDeathItem(item)) {
            event.setCancelled(true);
            clearItemMeta(event.getItemDrop().getItemStack());

            Player player = event.getPlayer();
            msg(player, SMG.ITEM.msg);
            notifyViolation(player, "drop", "death item", player.getLocation());
        }

        debug(event);
    }

    public boolean isDeathItem(ItemStack item) {
        net.minecraft.server.v1_13_R2.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if(nmsItemStack != null && nmsItemStack.hasTag())
            return isDeathItem(nmsItemStack.getTag());
        return false;
    }

    public boolean isDeathItem(NBTTagCompound item) {
        if(item != null) {
            NBTTagList attrlist = item.getList("AttributeModifiers", 10);

            if(attrlist != null) {
                for(int i = 0; i < attrlist.size(); i++) {
                    NBTTagCompound compound = (NBTTagCompound)attrlist.get(i);
                    if((compound.getString("Name").equalsIgnoreCase("MAX_HEALTH") || compound.getString("AttributeName").equalsIgnoreCase("generic.maxHealth")) && compound.getDouble("Amount") <= 0) {
                        fired_countermeasure("isDeathItem");
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public boolean containsDeathItem(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_13_R2.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if(nmsItemStack.getTag() != null) {
                NBTTagCompound blockentitytag = nmsItemStack.getTag().getCompound("BlockEntityTag");
                NBTTagList itemlist = blockentitytag.getList("Items", 10);

                for(int a = 0; a <= itemlist.size(); a++) {
                    NBTTagList attrlist = itemlist.getCompound(a).getCompound("tag").getList("AttributeModifiers", 10);

                    for(int b = 0; b <= attrlist.size(); b++) {
                        String attribute_name = attrlist.getCompound(b).getString("AttributeName");
                        String name = attrlist.getCompound(b).getString("Name");
                        Double amount = attrlist.getCompound(b).getDouble("Amount");

                        if((name.equalsIgnoreCase("MAX_HEALTH") || attribute_name.equalsIgnoreCase("generic.maxHealth")) && amount <= 0) {
                            fired_countermeasure("containsDeathItem");
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
}
