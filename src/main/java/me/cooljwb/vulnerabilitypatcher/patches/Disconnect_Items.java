package me.cooljwb.vulnerabilitypatcher.patches;

import me.cooljwb.vulnerabilitypatcher.SMG;
import me.cooljwb.vulnerabilitypatcher.Variables;
import net.minecraft.server.v1_13_R2.*;
import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.bukkit.Bukkit;
import org.bukkit.block.Block;
import org.bukkit.block.Container;
import org.bukkit.craftbukkit.v1_13_R2.CraftWorld;
import org.bukkit.craftbukkit.v1_13_R2.block.CraftBlock;
import org.bukkit.craftbukkit.v1_13_R2.entity.CraftPlayer;
import org.bukkit.craftbukkit.v1_13_R2.inventory.CraftItemStack;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitScheduler;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Copyright 2019 CoolJWB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author CoolJWB
 */

public class Disconnect_Items extends Patches implements Listener {

    private Logger log = Logger.getLogger("Minecraft");

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerInteractEvent(PlayerInteractEvent event) {
        if(event.getClickedBlock() != null) {
            if (event.getClickedBlock().getState() instanceof Container) {
                Block block = event.getClickedBlock();
                Container container = (Container) block.getState();

                String invstr = "";
                for (ItemStack item : container.getInventory().getContents()) {
                    if(isDisconnectItem(item))
                        clearItemMeta(item);
                    invstr = invstr + itemToString(item);
                }

                if(invstr.length() > 50000) {
                    event.setCancelled(true);
                    clearItemMeta(container.getInventory().getContents());
                }
            }
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockDispenseEvent(BlockDispenseEvent event) {
        ItemStack item = event.getItem();

        if(isDisconnectItem(item)) {
            event.setCancelled(true);
            clearItemMeta(item);
        }

        if(containsDisconnectItem(item)) {
            event.setCancelled(true);
            Container container = (Container) event.getBlock().getState();

            for(int c = 0; c < container.getInventory().getSize(); c++) {
                if(container.getInventory().getItem(c) != null) {
                    if (container.getInventory().getItem(c).isSimilar(event.getItem()))
                       clearItemMeta(container.getInventory().getItem(c));
                }
            }

            notifyViolation("Dispenser", "place", event.getItem().getType() + " with disconnect item in it", event.getBlock().getLocation());
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockPlaceEvent(BlockPlaceEvent event) {
        if(event.getBlockPlaced().getState() instanceof Container) {
            Container container = (Container) event.getBlockPlaced().getState();

            for(ItemStack item : container.getInventory()) {
                if(isDisconnectItem(item) || containsDisconnectItem(item)) {
                    container.getInventory().remove(item);
                    event.setCancelled(true);

                    Player player = event.getPlayer();
                    msg(player, SMG.ITEM_IN_CONTAINER.msg);
                    notifyViolation(player, "place", event.getBlock().getType() + " with disconnect item in it", event.getPlayer().getLocation());
                }
            }
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onInventoryClickEvent(InventoryClickEvent event) {
        if(isDisconnectItem(event.getCursor()) || containsDisconnectItem(event.getCursor())) {
            Player player = null;
            if(event.getWhoClicked() instanceof Player) {
                player = Bukkit.getPlayer(event.getWhoClicked().getUniqueId());
                if(!event.getEventName().equals("InventoryCreativeEvent"))
                    msg(player, SMG.ITEM.msg);
            }

            if(!event.getEventName().equals("InventoryCreativeEvent"))
                notifyViolation(player, "acquire", "disconnect item", player.getLocation());

            BukkitScheduler scheduler = Bukkit.getServer().getScheduler();
            scheduler.scheduleSyncDelayedTask(main, new Runnable() {
                @Override
                public void run() {
                    if(!event.getSlotType().equals(InventoryType.SlotType.OUTSIDE))
                        event.getWhoClicked().getInventory().getItem(event.getSlot()).setItemMeta(null);
                }
            }, 0L);
        }

        debug(event);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerDropEvent(PlayerDropItemEvent event) {
        ItemStack item = event.getItemDrop().getItemStack();

        if(isDisconnectItem(item) || containsDisconnectItem(item)) {
            event.setCancelled(true);
            clearItemMeta(event.getItemDrop().getItemStack());

            Player player = event.getPlayer();
            msg(player, SMG.ITEM.msg);
            notifyViolation(player, "drop", "disconnect item", player.getLocation());
        }

        debug(event);
    }

    public boolean isDisconnectItem(ItemStack item) {
        net.minecraft.server.v1_13_R2.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

        if(nmsItemStack != null && nmsItemStack.hasTag())
            return isDisconnectItem(nmsItemStack.getTag());
        return false;
    }

    public boolean isDisconnectItem(NBTTagCompound item) {
        if(item != null) {
            if(item.hasKey("CustomPotionColor") && item.getInt("CustomPotionColor") <= 0)
                return true;
            else if(item.getCompound("display").hasKey("color") && item.getCompound("display").getInt("color") <= 0)
                return true;
            else if(item.toString().length() > 50000 || isMovementDisconnectItem(item) || isInvalidAttributeName(item))
                return true;
        }
        return false;
    }

    public boolean containsDisconnectItem(ItemStack item) {
        if(item != null) {
            net.minecraft.server.v1_13_R2.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(item);

            if(nmsItemStack != null && nmsItemStack.getTag() != null) {
                NBTTagList items = nmsItemStack.getTag().getCompound("BlockEntityTag").getList("Items", 10);

                if(items != null) {
                    for (int a = 0; a <= items.size(); a++) {
                    	NBTTagCompound nmsitem = items.getCompound(a);
                        return isDisconnectItem(nmsitem.getCompound("tag"));
                    }
                }
            }
        }
        return false;
    }
    
    public boolean isMovementDisconnectItem(NBTTagCompound tag) {
    	if(tag != null) {
	    	NBTTagList attrlist = tag.getList("AttributeModifiers", 10);
	    	if(attrlist != null) {
		    	HashMap<String, Float> attributes = new HashMap<>();
		    	
		    	for(int a = 0; a <= attrlist.size(); a++) {
		    		NBTTagCompound attribute = attrlist.getCompound(a);
		    		
		    		if(attribute.getString("AttributeName").equalsIgnoreCase("generic.movementspeed") && attributes.containsKey(attribute.getString("AttributeName").toLowerCase()) && !Float.isFinite(attribute.getFloat("Amount")))
		    			return true;
		    		
		    		attributes.put(attribute.getString("AttributeName").toLowerCase(), attribute.getFloat("Amount"));
		    	}
	    	}
    	}
    	return false;
    }
    
    public boolean isInvalidAttributeName(NBTTagCompound tag) {
    	if(tag != null) {
	    	NBTTagList attrlist = tag.getList("AttributeModifiers", 10);

	    	if(attrlist != null) {
		    	for(int a = 0; a <= attrlist.size(); a++) {
		    		NBTTagCompound attribute = attrlist.getCompound(a);

		    		if(attribute != null && attribute.getString("AttributeName").toLowerCase() != "") {
			    		if(!Variables.Attributes.liststr.contains(attribute.getString("AttributeName").toLowerCase()))
			    			return true;
		    		}
		    	}
	    	}
    	}
    	return false;
    }
}